import React, { useState, useEffect, useCallback } from "react";
import { InputField } from "../../../components/UI/InputField/InputField";
import { Layout } from "../../../components/UI/Layout/Layout";
import Link from "next/link";
import Head from "next/head";
import { useFormik } from "formik";
import Image from "next/image";
import googleIcon from "../../../assets/icons/icons8-google.svg";
import axios from "axios";
import { useRouter } from "next/router";
import validatorFunc from "../../../helpers/validatorFunc";
import { useSession, signIn } from "next-auth/react";
import { Loader } from "../../../components/UI/Loader/Loader";
import { useSelector, useDispatch } from "react-redux";
import { authActions } from "../../../store/authSlice";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

export default function SignIn() {
  const dispatch = useDispatch();
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const { data: session, status } = useSession();
  const { isLoggedIn } = useSelector((state) => state?.auth);

  const formik = useFormik({
    initialValues: {
      user_email: "",
      user_password: "",
    },
    validate: (values) => {
      let errors = validatorFunc(values);
      return errors;
    },
    onSubmit: async (values) => {
      setIsLoading(true);
      try {
        const res = await axios.post(
          `${process.env.NEXT_PUBLIC_DEV_SERVER}/api/v1/user/signin`,
          values
        );
        setIsLoading(false);

        if (res.status === 404 || res.data?.isError) {
          notify(res.data?.message);
          // return window?.history?.back();
        }
        // if success
        if (res.status === 200 && !res.data?.isError) {
          notify(res.data?.message);
          // session management
          window?.sessionStorage.setItem("auth-token", res.data?.token);
          window?.sessionStorage.setItem("user_id", res.data?.user_id);
          window?.sessionStorage.setItem(
            "refresh-token",
            res.data?.refreshToken
          );
          // TODO remove this code from session or encrypt it
          window?.sessionStorage.setItem("code", res.data?.code);
          window?.sessionStorage.setItem("full_name", res.data?.full_name);

          // setting store
          dispatch(authActions.updateCode(res.data.code));
          dispatch(authActions.updateName(res.data.full_name));
          dispatch(authActions.updateUserID(res.data.user_id));

          router.replace("/user/dashboard");
        }
      } catch (err) {
        console.error(err);
        setIsLoading(false);
        return window?.location?.assign("/errorpage");
      }
    },
  });

  const notify = useCallback((msg) => toast(msg));

  useEffect(() => {
    if (session && status === "authenticated") {
      // user details got from google
      const values = {
        user_email: session.user.email,
      };
      // server db call
      setIsLoading(true);
      fetch(
        `${process.env.NEXT_PUBLIC_DEV_SERVER}/api/v1/user/sign-in-google`,
        {
          method: "POST",
          body: JSON.stringify(values),
          headers: {
            "Content-type": "application/json",
          },
        }
      )
        .then((res) => res.json())
        .then((res) => {
          setIsLoading(false);

          if (res?.isError) {
            notify(res?.message);
          }
          if (!res?.isError) {
            notify(res?.message);
            // session management
            window?.sessionStorage.setItem("auth-token", res?.token);
            window?.sessionStorage.setItem("code", res?.code);
            window?.sessionStorage.setItem("full_name", res?.full_name);
            // setting store
            dispatch(authActions.updateCode(res.code));
            dispatch(authActions.updateName(res.full_name));

            router.replace("/user/dashboard");
          }
        })
        .catch((err) => console.log(err));
    }
  }, [status]);

  // no entry to signed in user
  if (isLoggedIn) router.replace("/user/dashboard");
  if (isLoading) return <Loader />;

  return (
    <Layout navbarTransparent={false} showAuth={false} bgColor={"bg-blue-100"}>
      <Head>
        <title>Virtual Campus Recruitment | User Sign In</title>
        <meta name="description" content="Generated by create next app" />
        <meta httpEquiv="content-language" content="en" />
        <meta charset="UTF-8" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1.0"
        ></meta>
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ToastContainer
        autoClose={3000}
        hideProgressBar={false}
        rtl={false}
        pauseOnFocusLoss
        theme="light"
      />
      <div className="w-full h-full flex justify-center items-center py-10">
        <form
          onSubmit={formik.handleSubmit}
          className="w-full mx-3 lg:w-1/3 grid grid-cols-1 place-content-center shadow-lg rounded-md p-5 py-7 bg-gray-50"
        >
          <h1 className="font-bold text-lg lg:text-2xl mb-2 text-center">
            User Sign In
          </h1>
          <p className="text-base text-gray-500 mb-4 text-center">
            Welcome back user, good to see you
          </p>
          {/* google auth */}
          <div className="flex justify-center items-center w-full">
            <button
              type="button"
              className="flex items-center justify-center border border-blue-700 text-gray-700 font-semibold rounded-md w-full lg:text-lg text-base"
              onClick={() => {
                signIn(
                  "google",
                  { callbackUrl: "http://localhost:3000/auth/user/sign-in" },
                  { prompt: "login" }
                );
              }}
            >
              <span className="px-3 flex justify-center items-center">
                <Image
                  src={googleIcon}
                  width={"28px"}
                  height={"28px"}
                  alt="google icon"
                />
              </span>
              <span className="bg-blue-700 text-gray-100  px-4 py-2 w-full">
                Sign in with Google
              </span>
            </button>
          </div>
          {/* divider */}
          <div className="border-b border-gray-500 py-2 mb-2"></div>
          <InputField
            type="email"
            label="Email"
            name="user_email"
            required={true}
            id="email"
            placeholder="name@gmail.com"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            error={formik.errors.user_email}
            didTouched={formik.touched.user_email}
          />
          <InputField
            type="password"
            label="Password"
            required={true}
            id="password"
            name="user_password"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            error={formik.errors.user_password}
            didTouched={formik.touched.user_password}
          />
          <span className="w-full text-right">
            <Link href="/forgetpassword">
              <a className="text-gray-600 font-medium lg:text-base text-sm hover:text-underline hover:text-blue-700">
                Forgot Password?
              </a>
            </Link>
          </span>
          <div className="flex justify-center items-center w-full my-5">
            <button
              type="submit"
              className="bg-blue-700 text-gray-100 lg:text-lg w-full px-4 py-2 rounded-md border-0 hover:bg-violet-700 transition-all"
            >
              Sign In
            </button>
          </div>
          <span className="w-full justify-center flex items-center gap-1 text-gray-600">
            New here?
            <Link href="/auth/user/register">
              <a className="text-blue-800 font-medium lg:text-base text-sm hover:text-underline">
                Register First
              </a>
            </Link>
          </span>
        </form>
      </div>
    </Layout>
  );
}
