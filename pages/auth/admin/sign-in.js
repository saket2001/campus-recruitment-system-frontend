import React, { useCallback, useState } from "react";
import { InputField } from "../../../components/UI/InputField/InputField";
import { Layout } from "../../../components/UI/Layout/Layout";
import Head from "next/head";
import { useFormik } from "formik";
import axios from "axios";
import { useRouter } from "next/router";
import validatorFunc from "../../../helpers/validatorFunc";
import { Loader } from "../../../components/UI/index";
import { useDispatch } from "react-redux";
import { authActions } from "../../../store/authSlice";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

export default function SignIn() {
  const router = useRouter();
  const dispatch = useDispatch();
  const [isLoading, setIsLoading] = useState(false);

  const notify = useCallback((msg) => toast(msg));

  const formik = useFormik({
    initialValues: {
      email: "",
      user_password: "",
      user_username: "",
    },
    validate: (values) => {
      let errors = validatorFunc(values);
      return errors;
    },
    onSubmit: async (values) => {
      setIsLoading(true);
      try {
        const res = await axios.post(
          `${process.env.NEXT_PUBLIC_DEV_SERVER}/api/v1/admin/signin`,
          values
        );
        setIsLoading(false);

        if (res.status === 404 || res.data?.isError) notify(res.data?.message);
        if (res.status === 200 && !res.data?.isError) {
          notify(res.data?.message);

          // session management
          window?.sessionStorage.setItem("auth-token", res.data?.token);
          window?.sessionStorage.setItem(
            "refresh-token",
            res.data?.refreshToken
          );
          // TODO remove this code from session
          window?.sessionStorage.setItem("code", res.data?.code);
          window?.sessionStorage.setItem("full_name", res.data?.full_name);

          // setting store
          dispatch(authActions.updateCode(res.data.code));
          dispatch(authActions.updateName(res.data.full_name));
          dispatch(authActions.updateUserID(res.data.user_id));
          // routing to different page
          setTimeout(() => {
            router.push("/admin/dashboard");
          }, 3000);
        }
      } catch (err) {
        console.error(err);
        setIsLoading(false);
        return window?.location?.assign("/errorpage");
      }
    },
  });

  if (isLoading) return <Loader />;

  return (
    <Layout bgColor={"bg-blue-100"} showAuth={false}>
      <Head>
        <title>Virtual Campus Recruitment | Admin Sign In</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="w-full h-full flex justify-center items-center py-10">
        <form
          onSubmit={formik.handleSubmit}
          className="w-full mx-3 lg:w-1/3 grid grid-cols-1 place-content-center shadow-lg rounded-md p-5 py-7 bg-gray-50 "
        >
          <h1 className="font-bold text-lg lg:text-2xl mb-2 text-center">
            Admin Sign In
          </h1>
          {/* divider */}
          <InputField
            type="email"
            label="Email"
            name="email"
            required={true}
            id="email"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            error={formik.errors.email}
            didTouched={formik.touched.email}
          />
          <InputField
            type="text"
            label="Username"
            required={true}
            id="username"
            name="user_username"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            error={formik.errors.user_username}
            didTouched={formik.touched.user_username}
          />
          <InputField
            type="password"
            label="Password"
            required={true}
            id="password"
            name="user_password"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            error={formik.errors.user_password}
            didTouched={formik.touched.user_password}
          />
          <div className="flex justify-center items-center w-full my-5">
            <button
              type="submit"
              className="bg-blue-700 text-gray-100 lg:text-lg w-full px-4 py-2 rounded-md border-0 hover:bg-violet-700 transition-all"
            >
              Sign In
            </button>
          </div>
        </form>
      </div>
      <ToastContainer
        autoClose={3000}
        hideProgressBar={false}
        rtl={false}
        pauseOnFocusLoss
        theme="light"
      />
    </Layout>
  );
}
